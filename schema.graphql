# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

interface IMutationResponse {
    errors: [MutationError!]
    msg: String
    ok: Boolean!
}

union NotificationSubscription = FriendRequest | Message

"Data on versions of this GIF with a fixed height of 200 pixels. Good for mobile use."
type FixedImage {
    "The height of this GIF in pixels."
    height: String!
    "size: string"
    size: String!
    "The publicly-accessible direct URL for this GIF for this size of the GIF"
    url: String!
    "The width of this GIF in pixels."
    width: String!
}

"Amistad entre usuarios"
type FriendRequest {
    friendshipState: Boolean!
    id: ID!
    receiver: User!
    sender: User!
}

"GIF Objects are returned from most of GIPHY API's Endpoints. These objects contain a variety of information, such as the Image Object, which itself includes the URLS for multiple different GIFS formats and sizes."
type Giphy {
    "The unique bit.ly URL for this GIF"
    bitly_url: String!
    "The date this GIF was added to the GIPHY database."
    create_datetime: String!
    "A URL used for embedding this GIF"
    embed_url: String!
    "This GIF's unique ID"
    id: String!
    "An object containing data for various available formats and sizes of this GIF."
    images: Image!
    "The MPAA-style rating for this content. Examples include Y, G, PG, PG-13 and R"
    rating: String!
    "The page on which this GIF was found"
    source: String!
    "The title that appears on giphy.com for this GIF.d"
    title: String!
    "By default, this is almost always GIF."
    type: String!
    "The unique URL for this GIF"
    url: String!
    "The username this GIF is attached to, if applicable"
    username: String!
}

"The Images Object found in the GIF Object contains a series of Rendition Objects. These Rendition Objects includes the URLs and sizes for the many different renditions we offer for each GIF."
type Image {
    "Data on versions of this GIF with a fixed height of 200 pixels. Good for mobile use."
    fixed_height: FixedImage!
    "Data on versions of this GIF with a fixed width of 200 pixels. Good for mobile use."
    fixed_width: FixedImage!
}

type KeyWord {
    id: ID!
    name: String!
    projects: [Project!]!
}

type LoginResponse implements IMutationResponse {
    errors: [MutationError!]
    msg: String
    ok: Boolean!
    token: String
    user: User
}

"Mensajes enviados entre los usuarios."
type Message {
    content: String!
    date: DateTime!
    id: ID!
    project: Project!
    receiver: User!
    sender: User!
}

type MessageResponse implements IMutationResponse {
    errors: [MutationError!]
    message: Message
    msg: String
    ok: Boolean!
}

type Mutation {
    answerFriendRequest(accept: Boolean!, requestId: Float!): Boolean!
    createTeam(data: CreateTeamInput!): TeamResponse!
    enviarMensaje(message: String!, to: Float!): MessageResponse!
    joinTeam(data: JoinTeamInput!): TeamResponse!
    login(email: String!, password: String!): LoginResponse!
    loginWithToken(data: SocialRegisterInput!): LoginResponse!
    register(data: UserRegisterInput!): UserResponse!
    sendFriendRequest(to: Float!): UserResponse!
}

type MutationError {
    msg: String
    path: String
}

type Project {
    description: String!
    id: ID!
    image: String
    keywords: [KeyWord!]!
    messages: [Message!]!
    name: String!
    team: User!
    todos: [Todo!]!
    users: [UserToProject!]!
}

type ProjectToKeyWord {
    keyWord: KeyWord!
    project: Project!
}

type Query {
    myChat(with: Int!): [Message!]!
    myFriendRequests: [FriendRequest!]!
    myPendientFriendRequests: [FriendRequest!]!
    "Search gifs"
    searchGifs(query: String!): [Giphy!]
    seed: Boolean!
    "Get One Team by team id param"
    team(id: Float!): Team
    "Get Teams!"
    teams(limit: Float = 6.0, offset: Float = 0.0): [Team!]!
    "Get paginated teams"
    teamsPaginated(data: TeamPaginatedInput!): TeamPaginatedResponse!
    "Trending giphpys"
    trendingGifs(limit: Float = 25.0, offset: Float = 0.0): [Giphy!]
    "Get user by id. If you want to see your own info set id = -1"
    user(id: Float!): User
    users(data: PaginateInput!): UserPaginatedResponse!
}

type Subscription {
    waitNotifications: NotificationSubscription!
}

type Team {
    description: String!
    id: ID!
    image: String
    isPublic: Boolean!
    name: String!
    projects: [Project!]!
    users: [UserToTeam!]!
}

type TeamPaginatedResponse {
    cursor: String
    hasMore: Boolean!
    items: [Team!]!
}

type TeamResponse implements IMutationResponse {
    errors: [MutationError!]
    msg: String
    ok: Boolean!
    team: Team
}

type Todo {
    content: String!
    id: ID!
    project: Project!
    state: TODO_STATE!
}

"Registered users"
type User {
    age: Float!
    description: String!
    email: String!
    friends: [User!]!
    github: Boolean!
    google: Boolean!
    id: ID!
    image: String
    name: String!
    projects: [UserToProject!]!
    receivedMessages: [Message!]!
    sentMessages: [Message!]!
    teams: [UserToTeam!]!
}

type UserPaginatedResponse {
    cursor: String
    hasMore: Boolean!
    items: [User!]!
}

type UserResponse implements IMutationResponse {
    errors: [MutationError!]
    msg: String
    ok: Boolean!
    user: User
}

"Entidad que relaciona projectos y usuarios"
type UserToProject {
    id: ID!
    project: Project!
    role: String!
    user: User!
}

type UserToTeam {
    team: Team!
    user: User!
    userIsAdmin: Boolean!
}

"External auth apps like GitHub or Google"
enum EXTERNAL_AUTH_APPS {
    GitHub
    Google
}

"El estado de las todos, hay 3 posibles: Aun no empezada - En progreso - Finalizada"
enum TODO_STATE {
    COMPLETED
    IN_PROGRESS
    NOT_STARTED
}

input CreateTeamInput {
    "Team optional description"
    description: String
    image: Upload
    "Team Name"
    name: String!
    "Team optional password"
    password: String
}

"Informacion necesaria para unirse a un equipo."
input JoinTeamInput {
    "ID del equipo a ingresar."
    id: Float!
    "Contrase√±a del equipo a ingresar, nulo si es publico."
    password: String
}

input PaginateInput {
    cursor: String
    pageSize: Int!
}

"Datos necesarios para ingresar mediante una aplicacion externa como GitHub o Google"
input SocialRegisterInput {
    token: String!
    type: EXTERNAL_AUTH_APPS!
}

"Obtener informacion paginada en base a cursor"
input TeamPaginatedInput {
    cursor: String
    name: String
    onlyPublic: Boolean
    pageSize: Int!
}

"Informacion necesaria para crear nuevos usuarios"
input UserRegisterInput {
    bornDate: DateTime!
    email: String!
    image: Upload
    name: String!
    password: String
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime

"The `Upload` scalar type represents a file upload."
scalar Upload
